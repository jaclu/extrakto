#!/bin/bash
# This script is sourced. The fake shebang is included to help editors and linters.
# shell check disable=SC2034  # Suppresses warnings about unused variables.

skip_linters+=(
    # Disable some python linters, original auth is just breaking too many rules :)
    bandit
    flake8
    pylint
    pyright
)

#  =====  Handling which files should be skipped by 'olint'.  =====

# Patterns to exclude from linting, anything starting with this will be excluded
excluded_prefixes+=(
    .github/
    tests/
)

# Exclude specific files by specifying their entire filename as listed by 'olint'.
excludes+=(
    # path/to/file  # Example: Exclude a specific file.
    HELP.md
    README.md
    # extrakto.py
    # extrakto_plugin.py
)

# Exclude files based on their filename suffix.
# This is useful for skipping files with specific extensions or endings.
excluded_suffixes+=(
    # .pyc  # Example: Exclude compiled Python files.
)

# Exclude specific files based on their basename (filename without the path).
excluded_basenames+=(
    # .gitignore  # Example: Exclude .gitignore files.
)

# Exclude files based on their basename (filename without the path) prefix.
excluded_basename_prefixes+=(
    # test_  # Example: Exclude files that start with 'test_'.
)

# Per-project linter command overrides.
# Use these overrides to customize how specific linters are executed for
# this project.
#
# override_linter_cmd["shellcheck"]="shellcheck -a -x --color=always -o all"
# The above example customizes the shellcheck command to include additional options.

#
# Additional configuration options that can be pre-defined:
#
# ignore_project=yes   # Ignore this entire project from being processed.
#                         Essentially prevent olint from running in this project
# use_cache=false      # Disable the use of cache for linting results.
# mime_type_limit=true # Only scan files based on their MIME type.
# lint_continue=true   # Continue linting even if errors are found.
# debug_level=9        # Set the verbosity of debug output.

#
# Use this to override the location of plugins.
# This is useful if a project config needs to use alternate plugin options,
# or when trying out a new plugin definition.
# In most cases, leave this empty to use the default plugin location.
#
# olint_plugin_dir="/tmp/foo/olint_plugins"
